# Test code for the MSO modules
# Copyright: (c) 2023, Sabari Jaganathan (@sajagana) <sajagana@cisco.com>
#
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an ACI MultiSite host, username and password
  ansible.builtin.fail:
    msg: "Please define the following variables: mso_hostname, mso_username and mso_password."
  when: mso_hostname is not defined or mso_username is not defined or mso_password is not defined

# CLEAN ENVIRONMENT
- name: Set vars
  ansible.builtin.set_fact:
    mso_info: &mso_info
      host: "{{ mso_hostname }}"
      username: "{{ mso_username }}"
      password: "{{ mso_password }}"
      validate_certs: "{{ mso_validate_certs | default(false) }}"
      use_ssl: "{{ mso_use_ssl | default(true) }}"
      use_proxy: "{{ mso_use_proxy | default(true) }}"
      output_level: '{{ mso_output_level | default("debug") }}'
    ignore_errors: true
# Objects for the testing - begins

# SabAzure_AnsSG1

# sab_ansible_test_123 - tenant
# Devices:
#   Application_LB_123 -> https://20.253.151.162/visore.html#/dn=uni/tn-sab_ansible_test_123/clb-Application_LB_123
#   Network_LB_123 -> https://20.253.151.162/visore.html#/dn=uni/tn-sab_ansible_test_123/clb-Network_LB_123
#   TP_FW_123 -> https://20.253.151.162/visore.html#/dn=uni/tn-sab_ansible_test_123/cld-TP_FW_123
#   TP_LB_123 -> https://20.253.151.162/visore.html#dn=uni/tn-sab_ansible_test_123/cld-TP_LB_123

# Objects for the testing - ends

# Query test block begins

# - name: Query all listeners
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     contract: "Application_LB_123_C"
#     schema: SabAzure_AnsSG1
#     template: "T1"
#     site: "azure_ansible_test_2"
#     service_node_index: 0

#     listener: aplb_li_ans_http
#     listener_port: 80
#     listener_protocol: http
#     security_policy: default

#     rules:
#       - name: rule_2
#         priority: 2
#         host: rule_host
#         path: rule_path
#         # action:
#         #   - Forward To EPG1
#         # condition:
#         #   - Host is rule_host
#         #   - Path is rule_path
#         action_type: forward
#         content_type: text_plain
#         port: 443
#         protocol: https
#         provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
#           anp_name: AP1
#           epg_name: EPG1
#         url_type: original
#         response_code: "200"
#         redirect_protocol: http
#         redirect_port: 80
#         redirect_code: permanently_moved
#         health_check:
#           port: 443
#           protocol: https
#           path: "/"
#           interval: 30
#           timeout: 30
#           unhealthy_threshold: 3
#           host: use_host_from_rule
#           use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
#           success_code: "200"
#         target_ip_type: unspecified

#       - name: default
#         priority: 1
#         # action:
#         #   - Redirect To Original
#         action_type: redirect
#         content_type: text_plain
#         port: 80
#         protocol: http
#         # url_type: original
#         response_code: "200"
#         # redirect_protocol: inherit
#         # redirect_port: 443
#         # redirect_code: permanently_moved
#         target_ip_type: unspecified

#     state: present
#   ignore_errors: true
# - name: Query a listener with name NL1_Default_conf
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T1
#     contract: C1
#     site: azure_ansible_test_2
#     service_node_index: 0
#     listener: NL1_Default_conf
#     state: query
#   ignore_errors: true

# - name: Query an invalid listener with name NL1_Default_conf_invalid
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T1
#     contract: C1
#     site: azure_ansible_test_2
#     service_node_index: 1
#     listener: NL1_Default_conf
#     state: query
#   ignore_errors: true

# - name: Query all listeners with invalid service_node_index
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T1
#     contract: C1
#     site: azure_ansible_test_2
#     service_node_index: 3
#     state: query
#   ignore_errors: true

# - name: Query all listeners when the contract sg does not have valid listeners - T2_C1
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T2
#     contract: T2_C1
#     site: azure_ansible_test_2
#     service_node_index: 0
#     state: query
#   ignore_errors: true

# - name: Query all listeners when the contract sg does not have valid listeners - T2_C2
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T2
#     contract: T2_C2
#     site: azure_ansible_test_2
#     service_node_index: 0
#     state: query
#   ignore_errors: true

# - name: Add listener - sab_ans_l1
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info
#     schema: SabUI_AzureSG4
#     template: T1
#     contract: C1
#     site: azure_ansible_test_2
#     service_node_index: 0
#     listener: sab_ans_l1
#     listener_protocol: http
#     listener_port: 80
#     # security_policy: default
#     # frontend_ip: "uni/tn-sab_test_tenant_azure/clb-SabNLB_IP/vip-2.2.2.2"
#     state: present

#     # ssl_certificates:
#     #   - name: name_0
#     #     tenant: tenant
#     #     certificate_store: default

#     #   - name: name_1
#     #     tenant: tenant
#     #     certificate_store: default

#     rules:
#       - name: rule1
#         # floating_ip: floating_ip
#         priority: 1
#         host: rule_host.com
#         path: rule_path
#         # action: action
#         action_type: redirect
#         # content_type: text_plain
#         # port: 1
#         # protocol: http

#         # provider_epg_ref:
#         #   schema: epg_ref_schema
#         #   template: epg_ref_template
#         #   anp_name: epg_ref_anp_name
#         #   epg_name: epg_ref_epg_name

#         url_type: original
#         # custom_url: custom_url
#         redirect_host_name: redirect_host_name
#         redirect_path: redirect_path
#         # redirect_query: redirect_query
#         response_code: "200"
#         # response_body: response_body
#         redirect_protocol: https
#         redirect_port: 443
#         # redirect_code: permanently_moved
#         # target_ip_type: unspecified

#         # health_check:
#         #   port: 1
#         #   protocol: http
#         #   path: health_check_path
#         #   interval: 1
#         #   timeout: 1
#         #   unhealthy_threshold: 1
#         #   use_host_from_rule: false
#         #   success_code: health_check_success_code
#         #   host: health_check_host
# Query test block ends

# - name: Listener test task
#   cisco.mso.mso_schema_site_contract_service_graph_listener:
#     <<: *mso_info

#     schema: SabUI_AzureSG4
#     template: T1
#     contract: C1
#     site: azure_ansible_test_2
#     service_node_index: 0
#     listener: listener
#     protocol: http
#     port: 0
#     security_policy: default
#     frontend_ip: "uni/tn-sab_test_tenant_azure/clb-SabNLB_IP/vip-2.2.2.2"
#     state: present

#     ssl_certificates:
#       - name: name_0
#         tenant: tenant
#         certificate_store: default

#       - name: name_1
#         tenant: tenant
#         certificate_store: default

#     rules:
#       # - name: name_0
#       #   floating_ip: floating_ip
#       #   priority: 0
#       #   host: host
#       #   path: path
#       #   action: action
#       #   action_type: forward
#       #   content_type: text_plain
#       #   port: 0
#       #   protocol: http

#       #   provider_epg_ref:
#       #     schema: epg_ref_schema
#       #     template: epg_ref_template
#       #     anp_name: epg_ref_anp_name
#       #     epg_name: epg_ref_epg_name

#       #   url_type: original
#       #   custom_url: custom_url
#       #   redirect_host_name: redirect_host_name
#       #   redirect_path: redirect_path
#       #   # redirect_query: redirect_query
#       #   # response_code: response_code
#       #   # response_body: response_body
#       #   redirect_protocol: http
#       #   redirect_port: 0
#       #   redirect_code: permanently_moved
#       #   target_ip_type: unspecified

#       #   health_check:
#       #     port: 0
#       #     protocol: http
#       #     path: health_check_path
#       #     interval: 0
#       #     timeout: 0
#       #     unhealthy_threshold: 0
#       #     use_host_from_rule: false
#       #     success_code: health_check_success_code
#       #     host: health_check_host

#       - name: name_1
#         floating_ip: floating_ip
#         priority: 1
#         host: host
#         path: path
#         action: action
#         action_type: forward
#         content_type: text_plain
#         port: 1
#         protocol: http

#         provider_epg_ref:
#           schema: epg_ref_schema
#           template: epg_ref_template
#           anp_name: epg_ref_anp_name
#           epg_name: epg_ref_epg_name

#         url_type: original
#         custom_url: custom_url
#         redirect_host_name: redirect_host_name
#         redirect_path: redirect_path
#         # redirect_query: redirect_query
#         # response_code: response_code
#         # response_body: response_body
#         redirect_protocol: http
#         redirect_port: 1
#         redirect_code: permanently_moved
#         target_ip_type: unspecified

#         health_check:
#           port: 1
#           protocol: http
#           path: health_check_path
#           interval: 1
#           timeout: 1
#           unhealthy_threshold: 1
#           use_host_from_rule: false
#           success_code: health_check_success_code
#           host: health_check_host
# # Setup Part
# - name: Remove schemas
#   cisco.mso.mso_schema: &ansible_schema_absent
#     <<: *mso_info
#     schema: ansible_test
#     state: absent

# - name: Ensure ansible_test tenant absent
#   cisco.mso.mso_tenant: &ansible_tenant_absent
#     <<: *mso_info
#     tenant: ansible_test
#     users:
#       - "{{ mso_username }}"
#     state: absent

# - name: Ensure ansible_test tenant present
#   cisco.mso.mso_tenant: &ansible_tenant_present
#     <<: *ansible_tenant_absent
#     state: present

# - name: Ensure ansible_test schema with ans_test_template exist
#   cisco.mso.mso_schema_template:
#     <<: *mso_info
#     schema: ansible_test
#     tenant: ansible_test
#     template: ans_test_template
#     state: present

# - name: Ensure ans_test_anp exist
#   cisco.mso.mso_schema_template_anp:
#     <<: *mso_info
#     schema: ansible_test
#     template: ans_test_template
#     anp: ans_test_anp
#     state: present

# - name: Ensure ans_test_epg exist
#   cisco.mso.mso_schema_template_anp_epg:
#     <<: *mso_info
#     schema: ansible_test
#     template: ans_test_template
#     anp: ans_test_anp
#     epg: ans_test_epg
#     useg_epg: true
#     state: present

# - name: Ensure ans_test_epg_2 exist without useg_epg
#   cisco.mso.mso_schema_template_anp_epg:
#     <<: *mso_info
#     schema: ansible_test
#     template: ans_test_template
#     anp: ans_test_anp
#     epg: ans_test_epg_2
#     state: present

# # Test Part
# # Note: Ignore the below task, which is used to reference the attributes to other tasks
# - name: Invalid test - check for missing required attributes error message
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &useg_attribute_present
#     <<: *mso_info
#     schema: ansible_test
#     template: ans_test_template
#     anp: ans_test_anp
#     epg: ans_test_epg
#     description: "uSeg Attr object created using Ansible"
#     state: present
#   ignore_errors: true
#   register: ans_test_uSeg_1_nt

# - name: Invalid test - ans_test_uSeg_1 present - attribute_type - ip, useg_subnet - true, with value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_2
#     attribute_type: ip
#     useg_subnet: true
#     value: "1.2.3.4"
#   ignore_errors: true
#   register: ans_test_uSeg_1_nt1

# - name: Assertions check for invalid tests - ans_test_uSeg_1
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_1_nt is not changed
#       - ans_test_uSeg_1_nt.msg == "state is present but all of the following are missing{{':'}} name, type"
#       - ans_test_uSeg_1_nt1 is not changed
#       - ans_test_uSeg_1_nt1.msg == "The value of uSeg subnet IP should be an empty string or 0.0.0.0, when the useg_subnet is set to true."

# - name: ans_test_uSeg_1 present - attribute_type - ip, useg_subnet - true, without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *mso_info
#     schema: ansible_test
#     template: ans_test_template
#     anp: ans_test_anp
#     epg: ans_test_epg
#     name: ans_test_uSeg_1
#     attribute_type: ip
#     useg_subnet: true
#   register: ans_test_uSeg_1

# - name: Invalid test - ans_test_uSeg_2 present - attribute_type - ip, useg_subnet - false, without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_2
#     attribute_type: ip
#     useg_subnet: false
#   ignore_errors: true
#   register: ans_test_uSeg_2_nt

# - name: ans_test_uSeg_2 present - attribute_type - ip, useg_subnet - false, with value - check mode
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &ans_test_uSeg_2_cm_present
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_2
#     attribute_type: ip
#     useg_subnet: false
#     value: 11.22.33.44
#   check_mode: true
#   register: ans_test_uSeg_2_cm_present

# - name: ans_test_uSeg_2 present - attribute_type - ip, useg_subnet - false, with value - normal mode
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &ans_test_uSeg_2_nm_present
#     <<: *ans_test_uSeg_2_cm_present
#     output_level: debug
#   register: ans_test_uSeg_2_nm_present

# - name: ans_test_uSeg_2 present - attribute_type - ip, useg_subnet - false, with value - normal mode again
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *ans_test_uSeg_2_nm_present
#     output_level: debug
#   register: ans_test_uSeg_2_nm_present_again

# - name: Assertions check for add ans_test_uSeg_1 and ans_test_uSeg_2 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_1 is changed
#       - ans_test_uSeg_1.current != {}
#       - ans_test_uSeg_1.current.name == "ans_test_uSeg_1"
#       - ans_test_uSeg_1.current.type == "ip"
#       - ans_test_uSeg_1.current.value == "0.0.0.0"
#       - ans_test_uSeg_1.current.fvSubnet == true
#       - ans_test_uSeg_1.current.description == "ans_test_uSeg_1"
#       - ans_test_uSeg_2_nt is not changed
#       - ans_test_uSeg_2_nt.msg == "useg_subnet is False but all of the following are missing{{':'}} value"
#       - ans_test_uSeg_2_cm_present is changed
#       - ans_test_uSeg_2_cm_present.current != {}
#       - ans_test_uSeg_2_cm_present.previous == {}
#       - ans_test_uSeg_2_cm_present.current.name == "ans_test_uSeg_2"
#       - ans_test_uSeg_2_cm_present.current.type == "ip"
#       - ans_test_uSeg_2_cm_present.current.value == "11.22.33.44"
#       - ans_test_uSeg_2_cm_present.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_2_nm_present is changed
#       - ans_test_uSeg_2_nm_present.current != {}
#       - ans_test_uSeg_2_nm_present.previous == {}
#       - ans_test_uSeg_2_nm_present.current.name == "ans_test_uSeg_2"
#       - ans_test_uSeg_2_nm_present.current.type == "ip"
#       - ans_test_uSeg_2_nm_present.current.value == "11.22.33.44"
#       - ans_test_uSeg_2_nm_present.sent.fvSubnet == false
#       - ans_test_uSeg_2_nm_present.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_2_nm_present_again is not changed
#       - ans_test_uSeg_2_nm_present_again.current != {}
#       - ans_test_uSeg_2_nm_present_again.previous != {}
#       - ans_test_uSeg_2_nm_present_again.current.name == "ans_test_uSeg_2"
#       - ans_test_uSeg_2_nm_present_again.current.type == "ip"
#       - ans_test_uSeg_2_nm_present_again.current.value == "11.22.33.44"
#       - ans_test_uSeg_2_nm_present_again.sent.fvSubnet == false
#       - ans_test_uSeg_2_nm_present_again.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_2_nm_present_again.previous.name == "ans_test_uSeg_2"
#       - ans_test_uSeg_2_nm_present_again.previous.type == "ip"
#       - ans_test_uSeg_2_nm_present_again.previous.value == "11.22.33.44"
#       - ans_test_uSeg_2_nm_present_again.previous.description == "uSeg Attr object created using Ansible"

# - name: Invalid test - ans_test_uSeg_3 present - attribute_type - mac and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_3
#     attribute_type: mac
#   ignore_errors: true
#   register: ans_test_uSeg_3_nt

# - name: ans_test_uSeg_3 present - attribute_type - mac and with value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_3
#     attribute_type: mac
#     value: "aa:bb:cc:dd:ee:ff"
#   register: ans_test_uSeg_3

# - name: Assertions check for add ans_test_uSeg_3 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_3_nt is not changed
#       - ans_test_uSeg_3_nt.msg == "Failed due to invalid 'value' and the attribute_type is{{':'}} mac."
#       - ans_test_uSeg_3 is changed
#       - ans_test_uSeg_3.current != {}
#       - ans_test_uSeg_3.previous == {}
#       - ans_test_uSeg_3.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_3.current.name == "ans_test_uSeg_3"
#       - ans_test_uSeg_3.current.type == "mac"
#       - ans_test_uSeg_3.current.value == "aa:bb:cc:dd:ee:ff"

# - name: Invalid test - ans_test_uSeg_4 present - attribute_type - dns and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_4
#     attribute_type: dns
#   ignore_errors: true
#   register: ans_test_uSeg_4_nt

# - name: ans_test_uSeg_4 present - attribute_type - dns and with value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_4
#     attribute_type: dns
#     value: "test_dns_value"
#   register: ans_test_uSeg_4

# - name: Assertions check for add ans_test_uSeg_4 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_4_nt is not changed
#       - ans_test_uSeg_4_nt.msg == "Failed due to invalid 'value' and the attribute_type is{{':'}} dns."
#       - ans_test_uSeg_4 is changed
#       - ans_test_uSeg_4.current != {}
#       - ans_test_uSeg_4.previous == {}
#       - ans_test_uSeg_4.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_4.current.name == "ans_test_uSeg_4"
#       - ans_test_uSeg_4.current.type == "dns"
#       - ans_test_uSeg_4.current.value == "test_dns_value"

# - name: Invalid test - ans_test_uSeg_6 present - attribute_type - vm_datacenter and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_6
#     attribute_type: vm_datacenter
#     value: test_vm_datacenter_value
#   ignore_errors: true
#   register: ans_test_uSeg_6_nt

# - name: Invalid test - ans_test_uSeg_6 present - attribute_type - vm_datacenter, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_6
#     attribute_type: vm_datacenter
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_6_nt1

# - name: ans_test_uSeg_6 present - attribute_type - vm_datacenter, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_6
#     attribute_type: vm_datacenter
#     operator: equals
#     value: test_vm_datacenter_value
#   register: ans_test_uSeg_6

# - name: Assertions check for add ans_test_uSeg_6 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_6_nt is not changed
#       - ans_test_uSeg_6_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_datacenter."
#       - ans_test_uSeg_6_nt1 is not changed
#       - ans_test_uSeg_6_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_datacenter."
#       - ans_test_uSeg_6 is changed
#       - ans_test_uSeg_6.current != {}
#       - ans_test_uSeg_6.previous == {}
#       - ans_test_uSeg_6.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_6.current.name == "ans_test_uSeg_6"
#       - ans_test_uSeg_6.current.type == "rootContName"
#       - ans_test_uSeg_6.current.value == "test_vm_datacenter_value"

# - name: Invalid test - ans_test_uSeg_7 present - attribute_type - vm_hypervisor_identifier and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_7
#     attribute_type: vm_hypervisor_identifier
#     value: test_vm_hypervisor_identifier_value
#   ignore_errors: true
#   register: ans_test_uSeg_7_nt

# - name: Invalid test - ans_test_uSeg_7 present - attribute_type - vm_hypervisor_identifier, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_7
#     attribute_type: vm_hypervisor_identifier
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_7_nt1

# - name: ans_test_uSeg_7 present - attribute_type - vm_hypervisor_identifier, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_7
#     attribute_type: vm_hypervisor_identifier
#     operator: equals
#     value: test_vm_hypervisor_identifier_value
#   register: ans_test_uSeg_7

# - name: Assertions check for add ans_test_uSeg_7 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_7_nt is not changed
#       - ans_test_uSeg_7_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_hypervisor_identifier."
#       - ans_test_uSeg_7_nt1 is not changed
#       - ans_test_uSeg_7_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_hypervisor_identifier."
#       - ans_test_uSeg_7 is changed
#       - ans_test_uSeg_7.current != {}
#       - ans_test_uSeg_7.previous == {}
#       - ans_test_uSeg_7.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_7.current.name == "ans_test_uSeg_7"
#       - ans_test_uSeg_7.current.type == "hv"
#       - ans_test_uSeg_7.current.value == "test_vm_hypervisor_identifier_value"

# - name: Invalid test - ans_test_uSeg_8 present - attribute_type - vm_operating_system and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_8
#     attribute_type: vm_operating_system
#     value: test_vm_operating_system_value
#   ignore_errors: true
#   register: ans_test_uSeg_8_nt

# - name: Invalid test - ans_test_uSeg_8 present - attribute_type - vm_operating_system, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_8
#     attribute_type: vm_operating_system
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_8_nt1

# - name: ans_test_uSeg_8 present - attribute_type - vm_operating_system, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_8
#     attribute_type: vm_operating_system
#     operator: equals
#     value: test_vm_operating_system_value
#   register: ans_test_uSeg_8

# - name: Assertions check for add ans_test_uSeg_8 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_8_nt is not changed
#       - ans_test_uSeg_8_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_operating_system."
#       - ans_test_uSeg_8_nt1 is not changed
#       - ans_test_uSeg_8_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_operating_system."
#       - ans_test_uSeg_8 is changed
#       - ans_test_uSeg_8.current != {}
#       - ans_test_uSeg_8.previous == {}
#       - ans_test_uSeg_8.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_8.current.name == "ans_test_uSeg_8"
#       - ans_test_uSeg_8.current.type == "guest-os"
#       - ans_test_uSeg_8.current.value == "test_vm_operating_system_value"

# - name: Invalid test - ans_test_uSeg_9 present - attribute_type - vm_tag and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_9
#     attribute_type: vm_tag
#     value: test_vm_tag_value
#   ignore_errors: true
#   register: ans_test_uSeg_9_nt

# - name: Invalid test - ans_test_uSeg_9 present - attribute_type - vm_tag, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_9
#     attribute_type: vm_tag
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_9_nt1

# - name: ans_test_uSeg_9 present - attribute_type - vm_tag, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_9
#     attribute_type: vm_tag
#     operator: equals
#     value: test_vm_tag_value
#   register: ans_test_uSeg_9

# - name: Assertions check for add ans_test_uSeg_9 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_9_nt is not changed
#       - ans_test_uSeg_9_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_tag."
#       - ans_test_uSeg_9_nt1 is not changed
#       - ans_test_uSeg_9_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_tag."
#       - ans_test_uSeg_9 is changed
#       - ans_test_uSeg_9.current != {}
#       - ans_test_uSeg_9.previous == {}
#       - ans_test_uSeg_9.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_9.current.name == "ans_test_uSeg_9"
#       - ans_test_uSeg_9.current.type == "tag"
#       - ans_test_uSeg_9.current.value == "test_vm_tag_value"

# - name: Invalid test - ans_test_uSeg_10 present - attribute_type - vm_identifier and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_10
#     attribute_type: vm_identifier
#     value: test_vm_identifier_value
#   ignore_errors: true
#   register: ans_test_uSeg_10_nt

# - name: Invalid test - ans_test_uSeg_10 present - attribute_type - vm_identifier, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_10
#     attribute_type: vm_identifier
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_10_nt1

# - name: ans_test_uSeg_10 present - attribute_type - vm_identifier, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_10
#     attribute_type: vm_identifier
#     operator: equals
#     value: test_vm_identifier_value
#   register: ans_test_uSeg_10

# - name: Assertions check for add ans_test_uSeg_10 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_10_nt is not changed
#       - ans_test_uSeg_10_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_identifier."
#       - ans_test_uSeg_10_nt1 is not changed
#       - ans_test_uSeg_10_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_identifier."
#       - ans_test_uSeg_10 is changed
#       - ans_test_uSeg_10.current != {}
#       - ans_test_uSeg_10.previous == {}
#       - ans_test_uSeg_10.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_10.current.name == "ans_test_uSeg_10"
#       - ans_test_uSeg_10.current.type == "vm"
#       - ans_test_uSeg_10.current.value == "test_vm_identifier_value"

# - name: Invalid test - ans_test_uSeg_11 present - attribute_type - vmm_domain and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_11
#     attribute_type: vmm_domain
#     value: test_vmm_domain_value
#   ignore_errors: true
#   register: ans_test_uSeg_11_nt

# - name: Invalid test - ans_test_uSeg_11 present - attribute_type - vmm_domain, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_11
#     attribute_type: vmm_domain
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_11_nt1

# - name: ans_test_uSeg_11 present - attribute_type - vmm_domain, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_11
#     attribute_type: vmm_domain
#     operator: equals
#     value: test_vmm_domain_value
#   register: ans_test_uSeg_11

# - name: Assertions check for add ans_test_uSeg_11 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_11_nt is not changed
#       - ans_test_uSeg_11_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vmm_domain."
#       - ans_test_uSeg_11_nt1 is not changed
#       - ans_test_uSeg_11_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vmm_domain."
#       - ans_test_uSeg_11 is changed
#       - ans_test_uSeg_11.current != {}
#       - ans_test_uSeg_11.previous == {}
#       - ans_test_uSeg_11.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_11.current.name == "ans_test_uSeg_11"
#       - ans_test_uSeg_11.current.type == "domain"
#       - ans_test_uSeg_11.current.value == "test_vmm_domain_value"

# - name: Invalid test - ans_test_uSeg_12 present - attribute_type - vm_name and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_12
#     attribute_type: vm_name
#     value: test_vm_value
#   ignore_errors: true
#   register: ans_test_uSeg_12_nt

# - name: Invalid test - ans_test_uSeg_12 present - attribute_type - vm_name, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_12
#     attribute_type: vm_name
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_12_nt1

# - name: ans_test_uSeg_12 present - attribute_type - vm_name, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_12
#     attribute_type: vm_name
#     operator: equals
#     value: test_vm_value
#   register: ans_test_uSeg_12

# - name: Assertions check for add ans_test_uSeg_12 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_12_nt is not changed
#       - ans_test_uSeg_12_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_name."
#       - ans_test_uSeg_12_nt1 is not changed
#       - ans_test_uSeg_12_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vm_name."
#       - ans_test_uSeg_12 is changed
#       - ans_test_uSeg_12.current != {}
#       - ans_test_uSeg_12.previous == {}
#       - ans_test_uSeg_12.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_12.current.name == "ans_test_uSeg_12"
#       - ans_test_uSeg_12.current.type == "vm-name"
#       - ans_test_uSeg_12.current.value == "test_vm_value"

# - name: Invalid test - ans_test_uSeg_13 present - attribute_type - vnic_dn and without operator
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_13
#     attribute_type: vnic_dn
#     value: test_vnic_dn_value
#   ignore_errors: true
#   register: ans_test_uSeg_13_nt

# - name: Invalid test - ans_test_uSeg_13 present - attribute_type - vnic_dn, operator - equals and without value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_13
#     attribute_type: vnic_dn
#     operator: equals
#   ignore_errors: true
#   register: ans_test_uSeg_13_nt1

# - name: ans_test_uSeg_13 present - attribute_type - vnic_dn, operator - equals and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &ans_test_uSeg_13_present
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_13
#     attribute_type: vnic_dn
#     operator: equals
#     value: test_vnic_dn_value
#   register: ans_test_uSeg_13

# - name: Assertions check for add ans_test_uSeg_12 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_13_nt is not changed
#       - ans_test_uSeg_13_nt.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vnic_dn."
#       - ans_test_uSeg_13_nt1 is not changed
#       - ans_test_uSeg_13_nt1.msg == "Failed due to invalid 'value' or 'operator' and the attribute_type is{{':'}} vnic_dn."
#       - ans_test_uSeg_13 is changed
#       - ans_test_uSeg_13.current != {}
#       - ans_test_uSeg_13.previous == {}
#       - ans_test_uSeg_13.current.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_13.current.name == "ans_test_uSeg_13"
#       - ans_test_uSeg_13.current.type == "vnic"
#       - ans_test_uSeg_13.current.value == "test_vnic_dn_value"

# # Query Part
# - name: Invalid test - Query an uSeg Attr with name - invalid_useg_attr
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: invalid_useg_attr
#     state: query
#   register: invalid_useg_attr
#   ignore_errors: true

# - name: Query an uSeg Attr with name - ans_test_uSeg_1
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_6
#     state: query
#   register: query_a_useg_6

# - name: Query all uSeg Attrs
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     state: query
#   register: query_all_useg_objects

# - name: Assertions check for query uSeg Attr objects
#   ansible.builtin.assert:
#     that:
#       - invalid_useg_attr is not changed
#       - invalid_useg_attr.msg == "The uSeg Attribute{{':'}} invalid_useg_attr not found."
#       - query_a_useg_6 is not changed
#       - query_a_useg_6.current != {}
#       - query_a_useg_6.current.name == "ans_test_uSeg_6"
#       - query_a_useg_6.current.type == "rootContName"
#       - query_a_useg_6.current.value == "test_vm_datacenter_value"
#       - query_all_useg_objects is not changed
#       - query_all_useg_objects.current | length >= 12

# # Update Part
# - name: Update ans_test_uSeg_13 object description and value
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *ans_test_uSeg_13_present
#     description: "ans_test_uSeg_13 updated!"
#     value: test_vnic_dn_value_updated
#   register: ans_test_uSeg_13_update

# - name: Query an uSeg Attr with name - ans_test_uSeg_13 to check the updated changes
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_13
#     state: query
#   register: query_a_useg_object_with_name

# - name: Assertions check for update ans_test_uSeg_13 object
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_13_update is changed
#       - ans_test_uSeg_13_update.current != {}
#       - ans_test_uSeg_13_update.current.description == "ans_test_uSeg_13 updated!"
#       - ans_test_uSeg_13_update.current.name == "ans_test_uSeg_13"
#       - ans_test_uSeg_13_update.current.type == "vnic"
#       - ans_test_uSeg_13_update.current.value == "test_vnic_dn_value_updated"
#       - ans_test_uSeg_13_update.previous != {}
#       - ans_test_uSeg_13_update.previous.description == "uSeg Attr object created using Ansible"
#       - ans_test_uSeg_13_update.previous.name == "ans_test_uSeg_13"
#       - ans_test_uSeg_13_update.previous.type == "vnic"
#       - ans_test_uSeg_13_update.previous.value == "test_vnic_dn_value"
#       - query_a_useg_object_with_name is not changed
#       - query_a_useg_object_with_name.current != {}
#       - query_a_useg_object_with_name.current.description == "ans_test_uSeg_13 updated!"
#       - query_a_useg_object_with_name.current.name == "ans_test_uSeg_13"
#       - query_a_useg_object_with_name.current.type == "vnic"
#       - query_a_useg_object_with_name.current.value == "test_vnic_dn_value_updated"

# # Cleanup Part
# - name: ans_test_uSeg_1 absent with check mode
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &ans_test_uSeg_1_cm_absent
#     <<: *useg_attribute_present
#     name: ans_test_uSeg_1
#     state: absent
#   check_mode: true
#   register: ans_test_uSeg_1_cm_absent

# - name: ans_test_uSeg_1 absent with normal mode
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute: &ans_test_uSeg_1_nm_absent
#     <<: *ans_test_uSeg_1_cm_absent
#   register: ans_test_uSeg_1_nm_absent

# - name: ans_test_uSeg_1 absent with normal mode again
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *ans_test_uSeg_1_nm_absent
#   register: ans_test_uSeg_1_nm_absent_again

# - name: Assertions check for ans_test_uSeg_1 absent
#   ansible.builtin.assert:
#     that:
#       - ans_test_uSeg_1_cm_absent is changed
#       - ans_test_uSeg_1_cm_absent.current == {}
#       - ans_test_uSeg_1_cm_absent.previous != {}
#       - ans_test_uSeg_1_nm_absent is changed
#       - ans_test_uSeg_1_nm_absent.current == {}
#       - ans_test_uSeg_1_nm_absent.previous != {}
#       - ans_test_uSeg_1_nm_absent_again is not changed
#       - ans_test_uSeg_1_nm_absent_again.current == {}
#       - ans_test_uSeg_1_nm_absent_again.previous == {}

# - name: Query all uSeg Attrs - invalid template name
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     template: ans_test_template_123
#     state: query
#   ignore_errors: true
#   register: query_invalid_template

# - name: Query all uSeg Attrs - invalid Application Profile name
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     anp: ans_test_anp_123
#     state: query
#   ignore_errors: true
#   register: query_invalid_ap

# - name: Query all uSeg Attrs - invalid EPG name
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     epg: ans_test_epg_123
#     state: query
#   ignore_errors: true
#   register: query_invalid_epg

# - name: Invalid test - ans_test_anp_123 present under ans_test_epg_2
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     epg: ans_test_epg_2
#     name: ans_test_anp_123
#     attribute_type: mac
#     value: "AA:BB:CC:DD:EE:FF"
#   ignore_errors: true
#   register: ans_test_epg_2_nt

# - name: Assertions check for invalid inputs
#   ansible.builtin.assert:
#     that:
#       - query_invalid_template is not changed
#       - query_invalid_template.msg is match("Provided template 'ans_test_template_123' not matching existing template.+")
#       - query_invalid_ap is not changed
#       - query_invalid_ap.msg is match("Provided ANP 'ans_test_anp_123' not matching existing anp.+")
#       - query_invalid_epg is not changed
#       - query_invalid_epg.msg is match("Provided EPG 'ans_test_epg_123' not matching existing epg.+")
#       - ans_test_epg_2_nt is not changed
#       - ans_test_epg_2_nt.msg is match("ans_test_epg_2{{':'}} is not a valid uSeg EPG.")

# - name: Remove ansible_test schema to delete all uSeg Attr objects
#   cisco.mso.mso_schema:
#     <<: *ansible_schema_absent
#     schema: ansible_test
#     state: absent

# # To check all uSeg Attrs removed from the machine
# - name: Query all uSeg Attrs - Cleanup Part
#   cisco.mso.mso_schema_template_anp_epg_useg_attribute:
#     <<: *useg_attribute_present
#     state: query
#   ignore_errors: true
#   register: query_useg_absent_check

# - name: Assertions check for query all uSeg Attrs - Cleanup Part
#   ansible.builtin.assert:
#     that:
#       - query_useg_absent_check is not changed
#       - query_useg_absent_check.current == {}

# - name: Remove ansible_test tenant
#   cisco.mso.mso_tenant:
#     <<: *ansible_tenant_absent
#     state: absent

# # ------------------------------------------------
# Working tasks

- name: Remove listener - nlb_li_ans_udp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    state: absent
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: udp
        provider_epg_ref:
          anp_name: AP1
          epg_name: EPG1

        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: tcp
          interval: 5
          unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

- name: Query an non-existing listener - nlb_li_ans_udp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    state: query

- name: Add listener - nlb_li_ans_udp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: udp
        provider_epg_ref:
          anp_name: AP1
          epg_name: EPG1

        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: tcp
          interval: 5
          unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

- name: Add listener - nlb_li_ans_udp - again
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: udp
        provider_epg_ref:
          anp_name: AP1
          epg_name: EPG1

        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: tcp
          interval: 5
          unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

- name: Update listener - nlb_li_ans_udp - health_check properties
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: udp
        provider_epg_ref:
          anp_name: AP1
          epg_name: EPG1

        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: tcp
          interval: 10
          unhealthy_threshold: 4
          use_host_from_rule: true # "no"(unchecked) - host should be specified in the rule
          host: "1.1.1.1"
          success_code: 200-299
        target_ip_type: unspecified
  ignore_errors: true

- name: Query an listener - nlb_li_ans_udp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    name: nlb_li_ans_udp
    listener_port: 80
    listener_protocol: udp
    tenant: sab_ansible_test_123
    frontend_ip: "3.3.3.3"
    device: Network_LB_123
    security_policy: default
    state: query

- name: Add listener - nlb_li_ans_tcp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: nlb_li_ans_tcp
    listener_port: 80
    listener_protocol: tcp
    frontend_ip: "3.3.3.3"
    tenant: sab_ansible_test_123
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: tcp
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: tcp
          interval: 5
          unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

- name: Add listener - aplb_li_ans_https
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: aplb_li_ans_https
    listener_port: 443
    listener_protocol: https
    security_policy: default
    ssl_certificates:
      - name: sab_ansible_test_123
        certificate_store: default
        # tDn: uni/tn-sab_ansible_test_123/certstore
        # default: true
    rules:
      - name: default
        priority: 1
        # action:
        #   - Forward To EPG1
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: http
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: inherit
        redirect_port: 443
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          use_host_from_rule: true # "yes" - host should be empty in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

- name: Add listener - aplb_li_ans_http
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: aplb_li_ans_http
    listener_port: 80
    listener_protocol: http
    security_policy: default
    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Host is rule_host
        #   - Path is rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: https
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: https
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified

      - name: default
        priority: 1
        # action:
        #   - Redirect To Original
        action_type: redirect
        content_type: text_plain
        port: 80
        protocol: https
        url_type: original
        response_code: "200"
        redirect_protocol: inherit
        redirect_port: 443
        redirect_code: permanently_moved
        target_ip_type: unspecified
  ignore_errors: true

- name: Query all listeners under the Application_LB_123_C - service_node_index - 0
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    state: query
  ignore_errors: true

# # ------------------------------------------------
# mso.fail_json(msg="The Site Contract Service Graph Listener is not supported for the on-premise site.")

- name: Negative test - add listener - nlb_li_ans_tcp - url_type is custom
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: nlb_li_ans_tcp
    listener_port: 80
    listener_protocol: tcp
    frontend_ip: "3.3.3.3"
    tenant: sab_ansible_test_123
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: tcp
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: custom
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: https
          # interval: 5
          # unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

- name: Negative test - add listener - nlb_li_ans_tcp
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    name: nlb_li_ans_tcp
    listener_port: 80
    listener_protocol: tcp
    frontend_ip: "3.3.3.3"
    tenant: sab_ansible_test_123
    device: Network_LB_123
    security_policy: default
    # ssl_certificates: []
    rules:
      - name: default
        priority: 0
        # action:
        #   - Forward To EPG1
        # condition:
        #   - Request otherwise not routed
        action_type: forward
        content_type: text_plain
        port: 80
        protocol: tcp
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        redirect_protocol: inherit
        redirect_code: permanently_moved
        health_check:
          port: 80
          protocol: https
          # interval: 5
          # unhealthy_threshold: 2
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: 200-399
        target_ip_type: unspecified
  ignore_errors: true

# Add listener without rules
- name: Negative test - add listener - TP_LB_123_C
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "TP_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: TP_LB_123_C
    listener_port: 80
    listener_protocol: http
    security_policy: default
  ignore_errors: true

# mso.fail_json(msg="The deviceConfiguration object is not configured for the service_node_index: {0}.".format(service_node_index))

- name: Negative test - add listener - TP_LB_123_C
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "TP_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: TP_LB_123_C
    listener_port: 80
    listener_protocol: http
    security_policy: default
    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: http
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

# mso.fail_json(msg="The service_node_index: {0} is out of range.".format(service_node_index))

- name: Negative test - add listener - nt_aplb_li_ans_http
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 10

    listener: nt_aplb_li_ans_http
    listener_port: 80
    listener_protocol: http
    security_policy: default
    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: http
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

# mso.fail_json(msg="When the 'listener_protocol' is 'http', the rule 'protocol' must be 'https'")

- name: Negative test - add listener - nt_aplb_li_ans_http
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: nt_aplb_li_ans_http
    listener_port: 80
    listener_protocol: http
    security_policy: default
    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: http
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

# mso.fail_json(msg="When the 'listener_protocol' is 'https', the rule 'protocol' must be 'http'")

- name: Negative test - add listener - nt_aplb_li_ans_https
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0
    listener: nt_aplb_li_ans_https
    listener_port: 80
    listener_protocol: https
    security_policy: default
    ssl_certificates:
      - name: sab_ansible_test_123
        certificate_store: default
        # tDn: uni/tn-sab_ansible_test_123/certstore
        # default: true

    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: https
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

# mso.fail_json(
#     msg="When the 'listener_protocol' is http, the health_check protocol must be https at the object position: {0} and the object name: {1}".format(
#         position, rule.get("name")
#     )
# )

- name: Negative test - add listener - nt_aplb_li_ans_http
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: nt_aplb_li_ans_http
    listener_port: 80
    listener_protocol: http
    security_policy: default
    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: https
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: http
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

# mso.fail_json(
#     msg="When the 'listener_protocol' is https, the health_check protocol must be http at the object position: {0} and the object name: {1}".format(
#         position, rule.get("name")
#     )
# )

- name: Negative test - add listener - nt_aplb_li_ans_https
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Application_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "azure_ansible_test_2"
    service_node_index: 0

    listener: nt_aplb_li_ans_https
    listener_port: 80
    listener_protocol: https
    security_policy: default
    ssl_certificates:
      - name: sab_ansible_test_123
        certificate_store: default
        # tDn: uni/tn-sab_ansible_test_123/certstore
        # default: true

    rules:
      - name: rule_2
        priority: 2
        host: rule_host
        path: rule_path
        action_type: forward
        content_type: text_plain
        port: 443
        protocol: http
        provider_epg_ref: # "/schemas/65d6b44fa88f0a41485fd7b5/templates/T1/anps/AP1/epgs/EPG1"
          anp_name: AP1
          epg_name: EPG1
        url_type: original
        response_code: "200"
        redirect_protocol: http
        redirect_port: 80
        redirect_code: permanently_moved
        health_check:
          port: 443
          protocol: https
          path: "/"
          interval: 30
          timeout: 30
          unhealthy_threshold: 3
          host: use_host_from_rule
          use_host_from_rule: false # "no"(unchecked) - host should be specified in the rule
          success_code: "200"
        target_ip_type: unspecified
  ignore_errors: true

- name: Negative test - query all listeners with the non-cloud site
  cisco.mso.mso_schema_site_contract_service_graph_listener:
    <<: *mso_info
    contract: "Network_LB_123_C"
    schema: SabAzure_AnsSG1
    template: "T1"
    site: "ansible_test"
    service_node_index: 0
    state: query
